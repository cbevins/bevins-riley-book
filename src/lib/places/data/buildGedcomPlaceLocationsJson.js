import fs from 'fs'
import { GedcomPlaceKeys } from '../GedcomPlaceKeys.js'
import { GeoLocationDb } from '../GeoLocationDb.js'

const progName = (process.argv[1]).split('\\').pop()

function buildGeoLocationsMap(geo) {
    const map = new Map()
    for( const [plac, geoKey] of GedcomPlaceKeys.entries()) {
        // console.log(plac, geoKey)
        const loc = geo.search(geoKey)
        const keys = geoKey.split(',')
        const names = []
        let lat, lng
        // Examine each found GeoLocationDb segment
        for(let i=0; i<loc.entries().length; i++) {
            const entry = loc.entry(i)
            names.push(loc.entryName(i))
            lat =  loc.entryLat(i)
            lng =  loc.entryLng(i)
        }
        map.set(plac, [keys, names, lat, lng])
    }
    return map
}

export function writeGedcomPlaceLocationsJson(map, varName, fileName) {
    let js = `// auto-generated by ${progName} on ${new Date().toLocaleString()}\n`
    js += `export const ${varName} = new Map([\n`
    for(const [plac, entry] of map.entries()) {
        const location = JSON.stringify(entry)
        js += `    ["${plac}", ${location}],\n`
    }
    js += '])\n'
    // Write the Javascript to a file for later use
    fs.writeFile(fileName, js, function (err) {
        if (err) throw err
    })
}

console.log(`\nBuilding GedcomPlaceLocationsJson.js from ${GedcomPlaceKeys.size} GedcomPlaceKeys.js records...`)
const geo = new GeoLocationDb()
const map = buildGeoLocationsMap(geo)

const varName = 'GedcomPlaceLocationsJson'
const fileName = varName+'.js'
writeGedcomPlaceLocationsJson(map, varName, fileName)
console.log(`Wrote ${map.size} GedcomPlaceLocations to '${fileName}' Map()`)
